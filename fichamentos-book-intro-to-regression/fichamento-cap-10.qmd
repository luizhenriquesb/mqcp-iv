---
title: "Fichamento Expositivo - Checagem (capítulo 10)"
subtitle: "Livro: Galdino, Manoel. Causalidade (capítulo 10). In: _______. Introdução à Regressão para Ciências Sociais"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = here::here())
```

::: {style="text-align: justify"}
### Carregando pacotes

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(knitr)
library(electionsBR)
library(here)
```

## 10. Checagem

Antes de proceder com a parte de inferência estatística, vamos apresentar como realizar checagem do modelo. A razão é que, em geral, a teoria de inferência depende da suposição do modelo ser correta.

### 10.1 Resíduos

Os resíduo para cada observação $i$ é a diferença entre a previsão do modelo de regressão $\hat{y_i}$ e o valor observado $y_i$, às vezes chamado de $\hat{e}$, para diferenciar do erro populacional, $e$. No caso de nosso modelo de regressão linear com um único preditor, temos:

$$
\hat{e_i} = y_i - (\hat{\alpha} + \hat{\beta} \cdot x_i)
$$ Propriedades dos resíduos:

1.  Os resíduos deveriam ter esperança zero, condicional aos preditores. Formalmente, $\mathbb{E}[\hat{e}|X=x] = 0$

Isso sugere que o modelo está capturando adequadamente a tendência média dos dados. Para verificar essa propriedade, você pode plotar os resíduos em relação aos valores previstos. Se não houver um padrão discernível nos gráficos dos resíduos, isso indica que o modelo está capturando bem a tendência média.

2.  Se estivermos supondo homocedasticidade, devem ter variância constante (o que raramente será o caso)

A homocedasticidade indica que a variância dos resíduos é constante em todos os níveis dos preditores. Um gráfico dos resíduos em relação aos valores previstos pode ajudar a verificar se a dispersão dos resíduos é constante à medida que os valores previstos mudam. Padrões em forma de cone ou funil nos gráficos dos resíduos sugerem heterocedasticidade, indicando que a variância não é constante.

3.  Por se tratar de uma amostra, a probabilidade dos resíduos serem completamente não-correlacionados entre si é zero, contudo a correlação deve ser baixa e convergir para zero à medida que $n$ cresce para infinito

A independência dos resíduos entre si é desejável. Apesar de ser improvável que os resíduos sejam completamente não-correlacionados em uma amostra finita, a baixa correlação entre eles é importante. Você pode usar gráficos de autocorrelação dos resíduos ou testes estatísticos para verificar a independência dos resíduos.

4.  Se estamos supondo que o erro é Gaussiano (Normal), como no modelo de MLE, os resíduos devem também ser normais

Embora o pressuposto de normalidade não seja obrigatório para a validade do modelo, resíduos aproximadamente normais indicam que o modelo está capturando adequadamente a estrutura dos dados. Histogramas ou gráficos de densidade dos resíduos podem ajudar a avaliar essa propriedade. Testes de normalidade, como o teste de Shapiro-Wilk, também podem ser aplicados.

Cada uma dessas propriedades nos leva a um diagnóstico ou checagem.

## 10.2 Modelo no R

Para fazer os testes do nosso modelo, vamos fazer um modelo preditivo.

Vamos utilizar a votação no primeiro turno presidencial de 2018 para prever o voto no segundo turno, no estado de Alagoas.

Para tanto, vamos baixar os dados de votação presidencial de 2018 ao nível de seção eleitoral do [portal de dados abertos do TSE](https://dadosabertos.tse.jus.br/dataset/resultados-2018).

Podemos baixar o arquivo clicando no [link](https://cdn.tse.jus.br/estatistica/sead/odsele/votacao_secao/votacao_secao_2018_BR.zip) do dataset. Vamos deszipar e depois filtrar os dados para o estado de Alagoas (para ter uma base de dados pequena).

##### Importando a base diretamente do TSE através da URL

```{r}
# # URL do arquivo ZIP que você quer baixar
# url <- "https://cdn.tse.jus.br/estatistica/sead/odsele/votacao_secao/votacao_secao_2018_BR.zip"
# 
# # Caminho para a pasta onde você quer salvar o arquivo
# caminho_destino <- "datasets/dados_tse_2018"
# 
# # Nome do arquivo ZIP que será baixado
# arquivo_destino <- paste(caminho_destino, "/dados_tse_2018.zip", sep = "")
# 
# # Aumentando o tempo limite
# options(timeout = 300)
# 
# # Baixando o arquivo ZIP
# download.file(url, destfile = arquivo_destino, mode = "wb")
# 
# # Descompactando o arquivo ZIP
# unzip(arquivo_destino, exdir = caminho_destino)
# 
# # Excluindo o arquivo ZIP após descompactar
# file.remove(arquivo_destino)
```

##### Investigando a nossa base

```{r}
presid_al18 <- vroom::vroom("datasets/dados_tse_2018/votacao_secao_2018_BR.csv",
                          delim = ";", 
                          locale = locale(encoding = "Latin1")
                          )
# filtrando só AL
presid_al18 <- presid_al18 |>
  filter(SG_UF == "AL")

# descobre o que é voto nulo e branco
presid_al18 |>
  group_by(NM_VOTAVEL) |>
  summarise(max(NR_VOTAVEL))
```

```{r}
presid_al18_valido <- presid_al18 |>
  # Exclui brancos e nulos
  filter(!NR_VOTAVEL %in% c(95,96)) |>
  group_by(NR_SECAO,NR_ZONA, CD_MUNICIPIO, NR_TURNO, NR_VOTAVEL ) |>
  summarise(validos = sum(QT_VOTOS)) |>
  mutate(bol_bolsonaro = NR_VOTAVEL == 17,
         validos_bolsonaro = sum(validos*bol_bolsonaro)) |>
  summarise(total_validos = sum(validos),
            validos_bolsonaro = max(validos_bolsonaro),
            perc_bolsonaro = validos_bolsonaro/total_validos) |>
  dplyr::select(-total_validos) |>
  pivot_wider(id_cols = c(NR_SECAO, NR_ZONA, CD_MUNICIPIO), names_from = NR_TURNO, values_from = perc_bolsonaro) |>
  rename(perc_bolso_turno1 = '1',
         perc_bolso_turno2 = '2')
```

##### Criando modelo

```{r}
# modelo voto em Bolsonaro 1t prediz voto no 2t
reg1 <- lm(perc_bolso_turno2 ~ perc_bolso_turno1, data = presid_al18_valido)

summary(reg1)
```

##### Plotando a reta

```{r}
presid_al18_valido |>
  ggplot(aes(x=perc_bolso_turno1, y=perc_bolso_turno2)) + geom_point() + 
  geom_abline(slope = coef(reg1)[2] , intercept = coef(reg1)[1], colour  = "blue")
```

### 10.2.1 Resíduos contra o preditor

Se os resíduos tiverem esperança condicional zero, isso implica que, para cada valor de $x_i$, os resíduos devem ter média zero.

Visualmente, ao plotar os resíduos em relação aos valores preditos ($\hat{y}_i$) ou aos valores dos preditores ($x_i$), esperamos ver uma dispersão aleatória em torno de zero, sem seguir um padrão discernível. Isso se traduz em uma distribuição dos resíduos que não exibe tendências claras ou estruturas repetitivas em relação aos valores preditos.

Em um gráfico de resíduos versus valores previstos, se os pontos se espalham aleatoriamente ao redor da linha zero (ou de outra linha horizontal), sem seguir um padrão sistemático (como, por exemplo, um padrão em forma de U ou funil), isso sugere que a condição de esperança condicional zero dos resíduos está sendo atendida.

Em resumo, a ausência de um padrão claro nos gráficos dos resíduos em relação aos valores previstos é indicativa de que os resíduos têm média zero e atendem à condição de esperança condicional zero, o que é uma das premissas desejadas para um bom ajuste do modelo aos dados.

```{r}
# Gráfico Resíduos contra o preditor

df <- data.frame(residuos = residuals(reg1),
                 preditor = presid_al18_valido$perc_bolso_turno1)

df |>
  ggplot(aes(x=preditor, y = residuos)) + 
  geom_point() + 
  geom_smooth(method="lm", se=F) +
  theme_classic()
```

```{r}
par(mfrow = c(2,2))

plot(reg1)
```

### 10.2.2 Magnitude dos Resíduos contra o Preditor

A "Magnitude dos Resíduos Contra o Preditor" se refere à relação entre os resíduos de um modelo estatístico (normalmente de regressão) e as variáveis independentes (ou preditoras) usadas no modelo.

Quando se fala sobre a "magnitude" dos resíduos em relação ao preditor, está se avaliando a intensidade ou o tamanho desses resíduos em relação aos valores das variáveis independentes.

Em uma análise de regressão, se os resíduos exibirem uma mudança significativa ou padrões distintos à medida que os valores dos preditores mudam, isso pode indicar:

1.  **Heterocedasticidade:** Variação na dispersão dos resíduos conforme os valores dos preditores mudam. Por exemplo, a dispersão dos resíduos pode aumentar ou diminuir à medida que o valor de um preditor específico aumenta ou diminui.

2.  **Não linearidade:** Se a relação entre os resíduos e os preditores não for linear, pode indicar que a forma funcional do modelo não está capturando adequadamente a relação entre as variáveis independentes e dependentes.

Se essa magnitude estiver mudando sistematicamente com o preditor, isso sugere que o modelo pode não atender a algumas das suposições fundamentais da regressão linear, como homocedasticidade ou linearidade.

Para chegar a homocedasticidade $\mathbb{Var}[\hat{e}|X] = \sigma^2$ vamos olhar para a esperança condicional do quadrado dos resíduos. E podemos fazer isso plotando o gráfico do quadrado dos resíduos contra o preditor.

```{r}
# Gráfico Magnitude dos Resíduos contra o Preditor
df <- data.frame(residuos_sq = residuals(reg1)^2, 
                 preditor = presid_al18_valido$perc_bolso_turno1)

df |>
  ggplot(aes(x=preditor, y = residuos_sq)) + 
  geom_point() + 
  geom_smooth(method="lm", se=F)
```

##### Interpretação

"A reta deve ser horizontal, e não deveria ter mais pontos acima do que abaixo da reta. A altura da reta deveria ser aproximadamente o EQM. Conjuntos de pontos persistentemente acima ou abaixo da reta são sinais de problema com alguma de nossas hipóteses, ou há heterocedasticidade (a variância muda com o preditor) ou a forma funcional do modelo está errada de algum modo. No meu gráfico, a reta não é exatamente horizontal, mas talvez seja"good enough". Uma forma de olhar isso é computar erros padrões que lidem com a heterocedasticidade".

##### Melhorando a interpretação

"Ás vezes quando temos resíduos muito grandes, o quadrado deles fica gigante e o gráfico fica não-informativo (especialmente quando o modelo é problemático). Nesses casos, podemos plotar o valor absoluto dos resíduos, em vez do quadrado".

```{r}
# Plotando o valor absoluto dos resíduos, em vez do quadrado
df <- data.frame(residuos_abs = abs(residuals(reg1)), 
                 preditor = presid_al18_valido$perc_bolso_turno1)

df |>
  ggplot(aes(x=preditor, y = residuos_abs)) + geom_point() + geom_smooth(method="lm", se=F)
```

### 10.2.3 Resíduos com dados Temporais e/ou Espaciais

1.  **Estrutura Temporal/Espacial dos Dados**

-   Muitas vezes, os dados têm uma ordem específica, seja temporal (dados ao longo do tempo) ou espacial (dados de diferentes locais).
-   Em modelos simples, essa ordem não deveria importar, assumindo que a amostra é independente e identicamente distribuída (i.i.d) e que os erros não são correlacionados entre si.

2.  **Plot dos Resíduos Contra Tempo ou Espaço**

-   No exemplo dado, há uma ordem espacial nos dados (identificada por seções).
-   Faz-se um gráfico dos resíduos em relação a essa ordem espacial para verificar se há algum padrão ou correlação nos resíduos.

```{r}
# Plotando os Resíduos Contra o Espaço
presid_al18_valido <- presid_al18_valido |>
  mutate(id_secao = paste0(NR_SECAO, NR_ZONA , CD_MUNICIPIO))

df <- data.frame(residuos = residuals(reg1), id = as.numeric(presid_al18_valido$id_secao))

df |>
  ggplot(aes(x=id, y = residuos)) + geom_point() + geom_smooth(method="lm", se=F)
```

3.  **Técnica de Permutação para Verificação**

-   Uma técnica simples é o "permutation test" de forma simplificada, usando o pacote nullabor.
-   A ideia é criar gráficos dos resíduos permutados aleatoriamente contra o tempo ou espaço (no caso, espaço).
-   Essa técnica gera vários gráficos de resíduos permutados aleatoriamente e um gráfico com os resíduos reais. Observa-se se os resíduos reais se destacam ou se comportam de maneira diferente dos resíduos permutados, o que indicaria a presença de algum padrão não aleatório nos resíduos reais.

```{r, warning=FALSE}
library(nullabor)

# Aleatoriza do mesmo jeito sempre
set.seed(1234)

elec_reg <- data.frame(
  # df já existente
  presid_al18_valido,
  # nova coluna: residuos do modelo reg1
  .resid = residuals(reg1), 
  # nova coluna: valores preditos pelo modelo para cada observação
  .fitted = fitted(reg1)
  )

# Teste de permutação
shuffled_residuals <- lineup(
  # Cria modelo de reg linear
  null_lm(perc_bolso_turno2 ~ perc_bolso_turno1, 
          # especifica metodo de permitação do teste
          method = "rotate"), 
  # elec_reg contém os valores originais, os residuos reais e os valores previstos
  true = elec_reg,
  # nove permutações
  n = 9
  )

## decrypt("ve5B DEyE l6 GuClylu6 dT")

ggplot(shuffled_residuals, aes(x = .fitted, y = .resid)) +
  geom_point() +
  facet_wrap(vars(.sample))
```

Como podemos ver, dá para identificar que o plot 2 é diferente do resto. E de fato, ele é o original. Isso significa que existe algum padrão nos resíduos que não estamos levando em consideração.

### 10.3 Normalidade dos resíduos

Esse texto trata da verificação da normalidade dos resíduos em um modelo de regressão linear e descreve duas maneiras de avaliar a normalidade dos resíduos.

"Se estamos supondo normalidade dos resíduos, podemos verificar se são de fato normais. Uma forma de verificar é plotando o histograma dos resíduos e por cima a densidade de uma distribuição normal com média zero (resíduos têm média zero) e desvio-padrão igual ao desvio-padrão dos resíduos".

1.  **Histograma e Densidade**

-   Primeiramente, é plotado um histograma dos resíduos com a sobreposição da densidade de uma distribuição normal com média zero e desvio-padrão igual ao desvio-padrão dos resíduos.
-   A ideia é visualizar se a distribuição dos resíduos se assemelha a uma distribuição normal. Se os resíduos seguirem essa distribuição, o histograma se aproximará da curva de densidade teórica.

```{r, warning=FALSE}
df <- data.frame(residuos = residuals(reg1),
                 preditor = presid_al18_valido$perc_bolso_turno1, 
                 density_points = rnorm(length(residuals(reg1)) , 
                                        0, 
                                        sd(residuals(reg1)))
                 )

print(sd(residuals(reg1)))

df |>
  ggplot(aes(residuos)) + geom_histogram(aes(y=..density..)) +
  geom_density(aes(density_points), colour = "blue")
```

2.  **Q-Q Plot (Quantile-Quantile Plot)**

-   Em seguida, é explicado o conceito de Q-Q plot, que compara os quantis (pontos que dividem a distribuição em partes iguais) dos resíduos com os quantis de uma distribuição normal teórica.
-   No exemplo, é mostrado um Q-Q plot simples entre duas variáveis ordenadas, onde a comparação de seus quantis gera uma linha reta de 45 graus se elas seguirem a mesma distribuição.
-   Em seguida, é descrito o uso do Q-Q plot para os resíduos de uma regressão. Apresenta-se um Q-Q plot usando a função do R (qqnorm) e a linha de referência teórica (qqline) que representa a distribuição normal.
-   A observação é que se os resíduos seguirem uma distribuição normal, eles devem se alinhar aproximadamente com a linha de referência, sem padrões significativos ou desvios marcantes.

```{r}
x <- rnorm( 1000)

q50 <- quantile(x, .5)
q025 <- quantile(x, .025)
q975 <-quantile(x, .975)

print(c(q50, q025, q975))
```

```{r}
y <- rnorm(1000)

df <- data.frame(y=y, x=x)

# plot de x contra y
df %>%
  ggplot(aes(x=x, y=y)) + 
  geom_point()
```

```{r}
# plot de x ordenado contra y ordenado
df %>%
  ggplot(aes(x=sort(x), y=sort(y))) + geom_point() +  geom_abline(intercept = 0, slope = 1, colour ="blue")
```

```{r}
df <- data.frame(residuos = residuals(reg1), preditor = presid_al18_valido$perc_bolso_turno1, 
                 density_points = rnorm(length(residuals(reg1)) , 0, sd(residuals(reg1))),
                 fi_percentil = 1:length(residuals(reg1))/1:length(residuals(reg1)))

print(sd(residuals(reg1)))
```

```{r}
# plot de x ordenado contra y ordenado
df %>%
  ggplot(aes(y=sort(residuos), x=sort(density_points))) + geom_point() +
  geom_abline(intercept = 0, slope = 1, colour ="blue")
```

```{r}
qqnorm(residuals(reg1))
qqline(residuals(reg1))
```

### 10.4 Erro padrão robusto

Uma possibilidade é que tenha heterocedasticidade.

### 10.5 Heterocedasticidade

A heterocedasticidade surge quando a variabilidade dos erros (ou resíduos) em um modelo estatístico varia de acordo com os valores das variáveis independentes, também conhecidas como preditores. Em outras palavras, a dispersão dos erros não é constante em toda a faixa de valores das variáveis independentes.
:::
